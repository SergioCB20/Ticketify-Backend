from datetime import datetime, timezone
from typing import Optional, List
from uuid import UUID
from fastapi import HTTPException, status
from sqlalchemy.orm import Session

from app.models.promotion import Promotion, PromotionStatus, PromotionType
from app.models.event import Event
from app.repositories import promotion_repository


# =========================================================
# üß© PROMOTION SERVICE ‚Äî Core Business Logic
# =========================================================
class PromotionService:

    # =========================================================
    # üîπ Crear promoci√≥n
    # =========================================================
    @staticmethod
    def create(
        db: Session,
        name: str,
        code: str,
        promotion_type: PromotionType,
        discount_value: float,
        start_date: datetime,
        end_date: datetime,
        created_by_id: UUID,
        event_id: UUID,
        description: Optional[str] = None,
        max_discount_amount: Optional[float] = None,
        min_purchase_amount: Optional[float] = None,
        max_uses: Optional[int] = None,
        max_uses_per_user: Optional[int] = None,
        applies_to_all_events: bool = False,
        applies_to_new_users_only: bool = False,
        is_public: bool = True,
    ) -> Promotion:
        """
        Crear una nueva promoci√≥n asociada a un evento.
        """

        # 1Ô∏è‚É£ Validar fechas coherentes
        if end_date <= start_date:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="La fecha de fin debe ser posterior a la fecha de inicio."
            )

        # 2Ô∏è‚É£ Validar c√≥digo √∫nico
        existing_code = db.query(Promotion).filter(Promotion.code == code).first()
        if existing_code:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="El c√≥digo de promoci√≥n ya existe."
            )

        # 3Ô∏è‚É£ Verificar que el evento exista
        event = db.query(Event).filter(Event.id == event_id).first()
        if not event:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="El evento asociado no existe."
            )

        # 4Ô∏è‚É£ Validar solapamiento de promociones activas dentro del mismo evento
        overlapping_promo = db.query(Promotion).filter(
            Promotion.event_id == event_id,
            Promotion.start_date <= end_date,
            Promotion.end_date >= start_date,
            Promotion.status == PromotionStatus.ACTIVE
        ).first()

        if overlapping_promo:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"El evento ya tiene otra promoci√≥n activa ('{overlapping_promo.code}') en ese rango de fechas."
            )

        # 5Ô∏è‚É£ Crear la promoci√≥n
        new_promo = Promotion(
            name=name,
            description=description,
            code=code,
            promotion_type=promotion_type,
            discount_value=discount_value,
            max_discount_amount=max_discount_amount,
            min_purchase_amount=min_purchase_amount,
            max_uses=max_uses,
            max_uses_per_user=max_uses_per_user,
            start_date=start_date,
            end_date=end_date,
            applies_to_all_events=applies_to_all_events,
            applies_to_new_users_only=applies_to_new_users_only,
            is_public=is_public,
            created_by_id=created_by_id,
            event_id=event_id,
        )

        db.add(new_promo)
        db.commit()
        db.refresh(new_promo)
        return new_promo

    # =========================================================
    # üîπ Obtener promociones activas globales
    # =========================================================
    @staticmethod
    def get_active(db: Session) -> List[Promotion]:
        """
        Retorna todas las promociones activas y vigentes (por fecha y estado).
        """
        now = datetime.now(timezone.utc)
        promotions = db.query(Promotion).filter(
            Promotion.status == PromotionStatus.ACTIVE,
            Promotion.start_date <= now,
            Promotion.end_date >= now
        ).all()
        return promotions

    # =========================================================
    # üîπ Obtener por c√≥digo
    # =========================================================
    @staticmethod
    def get_by_code(db: Session, code: str) -> Promotion:
        """
        Buscar una promoci√≥n por su c√≥digo.
        """
        promo = db.query(Promotion).filter(Promotion.code == code).first()
        if not promo:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"No existe una promoci√≥n con el c√≥digo '{code}'."
            )
        return promo

    # =========================================================
    # üîπ Obtener por evento
    # =========================================================
    @staticmethod
    def get_by_event(db: Session, event_id: UUID) -> List[Promotion]:
        """
        Retorna todas las promociones asociadas a un evento espec√≠fico.
        """
        promotions = promotion_repository.get_promotions_by_event(db, event_id)
        return promotions or []

    # =========================================================
    # üîπ Aplicar una promoci√≥n (c√°lculo de descuento)
    # =========================================================
    @staticmethod
    def apply(db: Session, code: str, purchase_amount: float) -> float:
        """
        Aplica una promoci√≥n al monto de compra (si es v√°lida).
        Retorna el monto descontado.
        """
        promo = PromotionService.get_by_code(db, code)

        if not promo.is_active:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="La promoci√≥n no est√° activa o ya expir√≥."
            )

        discount = promo.calculate_discount(purchase_amount)
        if discount <= 0:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="La promoci√≥n no cumple las condiciones para aplicarse."
            )

        # Incrementar contador de usos
        promo.current_uses += 1
        if promo.max_uses and promo.current_uses >= promo.max_uses:
            promo.status = PromotionStatus.USED_UP

        db.add(promo)
        db.commit()
        return discount

    # =========================================================
    # üîπ Desactivar promoci√≥n
    # =========================================================
    @staticmethod
    def deactivate(db: Session, promo_id: UUID):
        """
        Desactiva manualmente una promoci√≥n.
        """
        promo = db.query(Promotion).filter(Promotion.id == promo_id).first()
        if not promo:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Promoci√≥n no encontrada."
            )

        promo.status = PromotionStatus.INACTIVE
        db.add(promo)
        db.commit()
        return {"message": f"Promoci√≥n '{promo.code}' desactivada correctamente."}

    # =========================================================
    # üîπ Eliminar promoci√≥n
    # =========================================================
    @staticmethod
    def delete(db: Session, promo_id: UUID):
        """
        Eliminar una promoci√≥n permanentemente.
        """
        promo = db.query(Promotion).filter(Promotion.id == promo_id).first()
        if not promo:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Promoci√≥n no encontrada."
            )

        db.delete(promo)
        db.commit()
        return {"message": f"Promoci√≥n '{promo.code}' eliminada correctamente."}

    # =========================================================
    # üîπ Actualizar promoci√≥n (edici√≥n completa)
    # =========================================================
    @staticmethod
    def update(db: Session, promo_id: UUID, update_data, current_user_id: UUID):
        """
        Permite modificar los campos clave de una promoci√≥n existente.
        """
        promo = db.query(Promotion).filter(Promotion.id == promo_id).first()
        if not promo:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Promoci√≥n no encontrada."
            )

        # Validar que el usuario sea el creador
        if str(promo.created_by_id) != str(current_user_id):
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="No tienes permiso para editar esta promoci√≥n."
            )

        # Aplicar solo los campos enviados (din√°mico)
        for field, value in update_data.dict(exclude_unset=True).items():
            if hasattr(promo, field):
                setattr(promo, field, value)

        promo.updated_at = datetime.now(timezone.utc)
        db.commit()
        db.refresh(promo)
        return promo


