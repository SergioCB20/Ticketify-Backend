# -*- coding: utf-8 -*-
"""
Script para verificar eventos en la base de datos
"""

from app.core.database import SessionLocal
from app.models import Event, EventCategory, TicketType, User, Role
from app.models.event import EventStatus

def check_events():
    """Verificar eventos en la base de datos"""
    db = SessionLocal()
    
    try:
        print("\n" + "=" * 80)
        print("üîç VERIFICANDO DATOS EN LA BASE DE DATOS")
        print("=" * 80 + "\n")
        
        # Verificar usuarios organizadores
        print("üë• ORGANIZADORES:")
        organizer_role = db.query(Role).filter(Role.name == "Organizer").first()
        if organizer_role:
            organizers = db.query(User).join(User.roles).filter(Role.name == "Organizer").all()
            print(f"   ‚úÖ {len(organizers)} organizadores encontrados")
            for org in organizers[:3]:  # Mostrar solo los primeros 3
                print(f"      - {org.email}")
            if len(organizers) > 3:
                print(f"      ... y {len(organizers) - 3} m√°s")
        else:
            print("   ‚ùå Rol 'Organizer' no encontrado")
        
        # Verificar categor√≠as
        print("\nüìÅ CATEGOR√çAS:")
        categories = db.query(EventCategory).filter(EventCategory.is_active == True).all()
        print(f"   ‚úÖ {len(categories)} categor√≠as activas")
        for cat in categories[:5]:
            print(f"      - {cat.name} ({cat.slug})")
        if len(categories) > 5:
            print(f"      ... y {len(categories) - 5} m√°s")
        
        # Verificar eventos
        print("\nüé´ EVENTOS:")
        total_events = db.query(Event).count()
        published_events = db.query(Event).filter(Event.status == EventStatus.PUBLISHED).count()
        draft_events = db.query(Event).filter(Event.status == EventStatus.DRAFT).count()
        
        print(f"   üìä Total: {total_events} eventos")
        print(f"   ‚úÖ Publicados: {published_events} eventos")
        print(f"   üìù Borradores: {draft_events} eventos")
        
        if total_events > 0:
            print("\n   üéØ Eventos recientes:")
            recent_events = db.query(Event).filter(
                Event.status == EventStatus.PUBLISHED
            ).order_by(Event.startDate.asc()).limit(5).all()
            
            for event in recent_events:
                ticket_count = len(event.ticket_types)
                date_str = event.startDate.strftime("%d/%m/%Y")
                category_name = event.category.name if event.category else "Sin categor√≠a"
                print(f"      ‚Ä¢ {event.title}")
                print(f"        üìÖ {date_str} | üìç {event.venue} | üè∑Ô∏è {category_name}")
                print(f"        üé´ {ticket_count} tipos de tickets | üë• {event.totalCapacity} capacidad")
        else:
            print("\n   ‚ö†Ô∏è  No hay eventos en la base de datos")
            print("   üí° Ejecuta: python seed_diverse_events.py")
        
        # Verificar tipos de tickets
        print("\nüéüÔ∏è  TIPOS DE TICKETS:")
        ticket_types = db.query(TicketType).all()
        print(f"   üìä Total: {len(ticket_types)} tipos de tickets")
        
        if ticket_types:
            # Calcular precios
            prices = [tt.price for tt in ticket_types]
            free_tickets = len([p for p in prices if p == 0])
            min_price = min(prices)
            max_price = max(prices)
            avg_price = sum(prices) / len(prices)
            
            print(f"   üí∞ Rango de precios: S/{min_price:.2f} - S/{max_price:.2f}")
            print(f"   üìä Precio promedio: S/{avg_price:.2f}")
            print(f"   üÜì Tickets gratuitos: {free_tickets}")
        
        # Verificar ubicaciones
        print("\nüìç UBICACIONES (VENUES):")
        venues = db.query(Event.venue).distinct().all()
        print(f"   üìä Total: {len(venues)} ubicaciones √∫nicas")
        for (venue,) in venues[:10]:
            print(f"      - {venue}")
        if len(venues) > 10:
            print(f"      ... y {len(venues) - 10} m√°s")
        
        print("\n" + "=" * 80)
        
        if total_events == 0:
            print("‚ö†Ô∏è  BASE DE DATOS VAC√çA")
            print("\nüí° PASOS RECOMENDADOS:")
            print("   1. Ejecutar: python seed_initial_data.py")
            print("   2. Ejecutar: python seed_diverse_events.py")
        else:
            print("‚úÖ BASE DE DATOS CON DATOS")
            print(f"\nüìä RESUMEN:")
            print(f"   ‚Ä¢ {len(organizers) if organizer_role else 0} organizadores")
            print(f"   ‚Ä¢ {len(categories)} categor√≠as")
            print(f"   ‚Ä¢ {total_events} eventos ({published_events} publicados)")
            print(f"   ‚Ä¢ {len(ticket_types)} tipos de tickets")
            print(f"   ‚Ä¢ {len(venues)} ubicaciones")
        
        print("=" * 80 + "\n")
        
        db.close()
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        db.close()


if __name__ == "__main__":
    check_events()
